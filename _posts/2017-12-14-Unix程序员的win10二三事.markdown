---
layout:         page
title:          Unix程序员的Win10二三事
subtitle:       Win10 Linux子系统安装使用
card-image:     http://115.182.41.123/files/201712/unixwin.jpeg
date:           2017-12-14
tags:           win10 linux
post-card-type: image
---
![](http://115.182.41.123/files/201712/unixwin.jpeg)

macOS延续自BSD Unix, Linux则是从内核开始重新编写但延续Unix使用方式的Unix。所以mac还有linux程序员，一般都算是*nix程序员，尽管其中还有不少的区别。  
Windows从版本10开始做出的最大改变，可能就是内置的linux子系统，原本的安装方式很简单，网上很多介绍，一般就是三步：1.设置中打开开发人员模式；2.windows组件中安装linux子系统；3.在DOS窗口中执行bash,随后经历一场漫长而令人期待的安装。  
后来这个办法不灵了，因为虽然win10几乎马不停蹄的更新了不少版本，其中的linux仍然保持着beta状态，下载的源网站也在国外，而因为我们都知道的原因，这个网站在国内访问越来越困难。  
有聪明人想了办法，比如首先从第三方下载tar安装包，利用fiddle之类的软件截获win10安装linux子系统时候的下载路径，随后替换为本地的tar文件，虽然麻烦点，但还是能很快的完成安装。后来，又是后来，这个办法也失效了，win10的内置下载路径已经不能再被修改替换。  
这时候说“上帝关上一扇门，总是又为你打开一扇窗”是不是有点矫情？

但事实就是如此，Win10 RS3之后的Linux子系统，终于转正成正式版了，从而登上了Win10的应用程序商店，并且还有了Ubuntu/Suse Linux等多个版本供选择，据说还会有更多正在赶来的途中，嗯，这扇窗开的不算小吧？  
无论你的Win10使用了什么版本，打开应用商店，都已经能搜索到这些Linux应用，但是，似乎只有RS3之后的版本才可以下载，其它版本的win10只能看看介绍，然后就只好洗洗睡了。  
事实上，正确的打开方式是这样：  
1. 首先登陆微软官网，使用自己的微软账号登陆进去，把自己的账号转换成开发者账号，如果找不到登陆链接，可以直接从下面第2步链接账号的地方进去。
2. 菜单路径是：开始菜单->齿轮图标进入设置->更新和安全->Windows预览体验计划，先选择链接Microsoft账户，使用你的微软账号捆绑到Win10系统，然后在上面的获取Insider Preview中，打开开发者预览功能。
3. 同一个设置界面中，选择最上面的Windows更新，这时候你会找到很多预览版的升级，踏踏实实升级到这个最新的预览版。你问是否稳定？你个*nix码农，关心Win10稳定不稳定干啥？

升级会耗费比较长的时间，一旦升级完成，打开应用商店，选一个你喜欢的linux版本，下载就好了。  

————————————————————————————————————————————————

很多unix程序员的工作方式都是ssh登陆，然后vi修改程序，接着make编译。  
到了win10你会发现，同样的ssh不管用了......  
实际的情况是这样，win10默认的ssh留给了自己的CMD应用，也就是Windows命令行，你只能使用Win10的管理员登陆，比如一般默认的Administrator,也就是说，你应当用类似：
```bash
ssh Administrator@192.168.1.100
```
这样来登陆到Win10，随后可以用bash启动linux。  
但是如果linux已经在电脑桌面其他的CMD窗口启动了怎么办？这时候bash命令会报错，说已经有其它实例运行，怎么解决呢？可以在桌面进入linux子系统，编辑一下/etc/ssh/sshd_config文件,把其中的22号端口，修改为比如23，修改完是这样子的：
```bash
Port 23
```
如果你的win10开了防火墙，记着修改防火墙设置，允许传入的连接申请（allow incoming traffic）到23号端口，以便允许你远程登陆。  
linux子系统再次启动之后，`ssh -p 23 username@192.168.1.100`就可以登陆到linux之中了。  
如果你根本不使用windows自己的命令行，那在win10 services中关闭SSH Server Broker、SSH Server Proxy两项，就可以让出来22号端口，从而不修改linux子系统的ssh端口，这样也是可以的。不过我不建议这样，比如你想远程关机，就只能在CMD中执行，Linux子系统根本没有这个权限。  
这时候还存在一个问题，如果win10重新启动，而linux子系统还没有启动，ssh是无法登陆到linux的，解决这个问题，可是个麻烦事了，大概经过这些步骤：  
* 在linux子系统中执行：`sudo dpkg-reconfigure openssh-server`生成ssh服务器端证书。
* `sudo vi /etc/ssh/sshd_config`，再次编辑sshd的配置文件，把`UsePrivilegeSeparation yes`这一行最后的yes修改成no。
* 继续修改这个文件，把`PasswordAuthentication no`修改成`PasswordAuthentication yes`。
* 保存/etc/ssh/sshd_config退出vi。（嗯，写给小白，保存退出vi的方法是：ESC键->":"键->x然后回车）
* 运行`sudo visudo`编辑sudoers文件，增加一行：`$USER ALL = (root) NOPASSWD: /usr/sbin/sshd -D`，注意这里把$USER替换成你的linux子系统用户名。保存退出。如果visudo有任何报错一定仔细检查修改直到正常，否则你的linux将无法再登陆！！！
* 在Win10一侧建立一个vbs脚本文件，比如叫autostartssh.vbs，内容为：
```vbs
set ws=wscript.createobject("wscript.shell")
ws.run "C:\Windows\System32\bash.exe -c 'sudo /usr/sbin/sshd -D'",0
```
* 现在可以先测试一下，双击autostartssh.vbs文件，应当能顺利的打开linux子系统并启动ssh服务器。
* 如果测试没有问题，在开始菜单->Windows管理程序文件夹中启动win10的“任务计划程序”，增加一个开机自动执行任务，操作是启动程序，程序内容就是刚刚编写的这个autostartssh.vbs脚本。在这里碰到一个我相信是bug,本来触发器应当设置为“电脑启动时”自动执行，但死活无效，最后设置成了”当任何用户登录时”反而没有任何人登陆就执行了，实际是开机自动执行的效果。  

不管怎么样，我们想开机自动运行Linux ssh的目的，终于达到了。

————————————————————————————————————————————————

Win10下面Linux子系统的日常维护跟标准的Linux系统一样，比如Ubuntu版本也是使用apt进行包管理，日常要经常进行一些`apt update` / `apt upgrade`这样的操作。感觉上，90%原来服务器端的开发工作，都可以在这里面完成了。有些用户喜欢GUI界面，可以尝试安装Xming之类的X11 Windows Server,官方网址是：<https://xming.en.softonic.com>,不过我觉得必要不是很大，开发工具、办公工具以及其它一些常用软件，windows下已经有很多了，真的没有必要自讨无趣。  

已知有几项限制，开发过程中可能会碰到：
* 本质上Linux子系统还是接近虚机的运行方式，因此，比较偏向底层的网络编程，比如socks udp操作，测试的时候你要考虑到实际上linux是通过win10的网络系统转发的，难以描述确切的症状，总之会碰到很多无法达到预期的情况，这类程序调试，可能你还是需要一台linux或者mac真机。
* tcpdump之类的工具，在linux子系统上是无法正常执行的，因此如果要抓包，估计你只能借助windows下的软件了，不过无论如何可能达不到tcpdump这样方便。sad...
* 上面提到过，类似关机、重启之类这样的操作，在linux子系统中无法实现，这样的功能，还是需要真机调试。

(你有没有好奇今天的题头图我没有说图文无关？事实上这幅图片是Win10预置的桌面壁纸之一，不算无关吧？)





