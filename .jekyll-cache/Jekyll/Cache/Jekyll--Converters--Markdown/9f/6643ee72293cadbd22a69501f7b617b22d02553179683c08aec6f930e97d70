I"'�<p><img srchttp://blog.17study.com.cn/r/attachments/201904/tensorFlow2/tf-logo-card-2.png" alt="" /></p>
<h4 id="tensorflow的javascript版">TensorFlow的Javascript版</h4>
<p>TensorFlow一直努力扩展自己的基础平台环境，除了熟悉的Python，当前的TensorFlow还实现了支持Javascript/C++/Java/Go/Swift(预发布版)共6种语言。<br />
越来越多的普通程序员，可以容易的在自己工作的环境加入机器学习特征，让产品更智能。</p>

<p>在Javascript语言方面，TensorFlow又分为两个版本。一个是使用node.js支持，用于服务器端开发的@tensorflow/tfjs-node。安装方法：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> @tensorflow/tfjs-node
<span class="c"># ...GPU版本...</span>
npm <span class="nb">install</span> @tensorflow/tfjs-node-gpu
</code></pre></div></div>
<p>另一个则是在浏览器中就可以使用的前端机器学习包@tensorflow/tfjs。安装方法：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> @tensorflow/tfjs
</code></pre></div></div>
<p>前者跟Python的版本一样，可以工作在单机、工作站、服务器环境。后者则只需要支持HTML5的浏览器就能良好的执行，浏览器版本目前还不支持GPU运算。</p>

<h4 id="浏览器机器学习快速入门">浏览器机器学习快速入门</h4>
<p>浏览器版本的TensorFlow是其家族中性能最弱的一个发布，但很可能也是容易产生最多应用的版本。毕竟无需考虑运行环境，浏览即执行，能最大限度上降低对用户的额外要求。<br />
我觉得将来很可能发展为在服务器端通过GPU支持完成模型的开发和训练，然后浏览器作为最方便的客户端只用来完成预测和反馈给用户直接的结果。</p>

<p>很多前端程序员还不喜欢使用node.js和npm帮助管理整体开发。所以我们直接从网页入手。而且这种方式，也更容易让人理解程序完整的运行方式。<br />
首先是基础的网页，我在下面给出一个模板。TensorFlow.js的开发，都集中在js程序中，所以这个网页可以保存下来。不同的项目，只要更换不同的js程序就好。</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
<span class="nt">&lt;head&gt;</span>
  <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"Content-Type"</span> <span class="na">content=</span><span class="s">"text/html; charset=utf-8"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;title&gt;</span>TensorFlow.js 练习<span class="nt">&lt;/title&gt;</span>
  <span class="c">&lt;!-- 引入机器学习库TensorFlow.js --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="c">&lt;!-- 引入机器学习可视化库tfjs-vis --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@1.0.2/dist/tfjs-vis.umd.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="c">&lt;!-- 机器学习主程序（自己编写） --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"script.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="c">&lt;!-- 放你的网页内容 --&gt;</span>
  本页无正文<span class="nt">&lt;p</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
<p>其实就是一个空白的网页，分别引入了三个js文件。第一个js是TensorFlow的主要库，必不可少。第二个是用于TensorFlow可视化图表显示的，在正式发布的程序中根据需要使用。第三个是自己编写的程序。</p>

<p>接着我们使用<a href="http://blog.17study.com.cn/2019/04/24/tensorflow-from-1-to-2-7/">《TensorFlow从1到2（七）》</a>中，油耗预测的数据集，也完成一个简单的油耗预测的示例。<br />
原始的数据结构请到第七篇中查看。这里为了js处理的方便，已经预先转成了json格式。下面是头两条记录的样子:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">chevrolet chevelle malibu</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Miles_per_Gallon</span><span class="dl">"</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Cylinders</span><span class="dl">"</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Displacement</span><span class="dl">"</span><span class="p">:</span> <span class="mi">307</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Horsepower</span><span class="dl">"</span><span class="p">:</span> <span class="mi">130</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Weight_in_lbs</span><span class="dl">"</span><span class="p">:</span> <span class="mi">3504</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Acceleration</span><span class="dl">"</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Year</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1970-01-01</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Origin</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">USA</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="p">{</span>
    <span class="dl">"</span><span class="s2">Name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">buick skylark 320</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Miles_per_Gallon</span><span class="dl">"</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Cylinders</span><span class="dl">"</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Displacement</span><span class="dl">"</span><span class="p">:</span> <span class="mi">350</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Horsepower</span><span class="dl">"</span><span class="p">:</span> <span class="mi">165</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Weight_in_lbs</span><span class="dl">"</span><span class="p">:</span> <span class="mi">3693</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Acceleration</span><span class="dl">"</span><span class="p">:</span> <span class="mf">11.5</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Year</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1970-01-01</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Origin</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">USA</span><span class="dl">"</span>
  <span class="p">},</span>
    <span class="p">...</span>
</code></pre></div></div>
<p>我们只是想演示TensorFlow.js的使用，所以把问题简化一下，只保留功率数据(Horsepower)和油耗数据(MPG)，MPG这里同时也是标注信息。<br />
因为我们做过这个练习，我们知道样本中有无效数据。所以数据预处理的时候，还要把数据做一个清洗（当然数据清洗应当养成习惯）。<br />
随后，浏览器不是命令行，不能简单的在命令行输出信息。这时候轮到TensorFlow-vis出场了，我们做一个二维映射把基础数据显示在屏幕上。<br />
第一步先不走那么快，我们只完成这一部分功能，先执行起来看一看。<br />
下面是完成刚才所说功能的代码，别忘了文件名是script.js，跟index.html要放在同一目录：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取数据，只保留感兴趣的字段，并进行数据清洗</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">carsDataReq</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://storage.googleapis.com/tfjs-tutorials/carsData.json</span><span class="dl">'</span><span class="p">);</span>  
  <span class="kd">const</span> <span class="nx">carsData</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">carsDataReq</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>  
  <span class="kd">const</span> <span class="nx">cleaned</span> <span class="o">=</span> <span class="nx">carsData</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">car</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="c1">//只保留两个字段</span>
    <span class="na">mpg</span><span class="p">:</span> <span class="nx">car</span><span class="p">.</span><span class="nx">Miles_per_Gallon</span><span class="p">,</span>
    <span class="na">horsepower</span><span class="p">:</span> <span class="nx">car</span><span class="p">.</span><span class="nx">Horsepower</span><span class="p">,</span>
  <span class="p">}))</span>
  <span class="c1">//清洗无效数据</span>
  <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">car</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">car</span><span class="p">.</span><span class="nx">mpg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">car</span><span class="p">.</span><span class="nx">horsepower</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">));</span>
  
  <span class="k">return</span> <span class="nx">cleaned</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 相当于主程序，执行入口</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//载入数据</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getData</span><span class="p">();</span>
  <span class="c1">//建立绘图数据</span>
  <span class="kd">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">x</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">horsepower</span><span class="p">,</span>
    <span class="na">y</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">mpg</span><span class="p">,</span>
  <span class="p">}));</span>
  <span class="c1">//使用tfvis绘图</span>
  <span class="nx">tfvis</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">scatterplot</span><span class="p">(</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Horsepower v MPG</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">values</span><span class="p">},</span> 
    <span class="p">{</span>
      <span class="na">xLabel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Horsepower</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">yLabel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MPG</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">height</span><span class="p">:</span> <span class="mi">300</span>
    <span class="p">}</span>
  <span class="p">);</span>
<span class="p">}</span>
<span class="c1">//载入后开始执行run()函数</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="nx">run</span><span class="p">);</span>
</code></pre></div></div>
<p>在支持HTML5的浏览器中打开index.html文件就开始了程序执行，因为是本地文件，通常双击打开就可以。程序一开始首先下载样本数据，视网络环境不同，速度会有区别。执行结束后会自动在浏览器的右侧弹出图表窗口显示我们绘制的样本分布图。<br />
除了可能的输入拼写错误，文件下载是最可能出现的问题，如果碰到这种情况，请根据数据文件的路径自行下载到本地来进行试验。<br />
<img src="http://blog.17study.com.cn/attachments/201904/tensorFlow2/js-vis-0.png" alt="" /><br />
这部分相当于一个Hello World吧。从示例中可以看出，js在数据处理中，虽然没有Python的优势，但对于确定的数据类型也有自己的优点。在图表的显示上更是方便，无需第三方模块的支持。何况大多数现代浏览器也都包括console工具，必要情况下通过输出console的调试信息也可以达到很多目的。<br />
此外有一点需要说明的，是稍微可能耗时的函数，应当尽量使用异步方式，也就是function关键字之前的async。以避免阻塞整个程序的执行。<br />
当然使用了异步方式，程序的整体逻辑一定要多思考，想清楚，避免执行过程中顺序混乱。</p>

<h4 id="用js定义模型">用js定义模型</h4>
<p>TensorFlow.js完整模仿了Keras的模型定义方式，所以如果使用过Keras，那使用TensorFlow.js完全无压力。<br />
下面就是本例中的模型定义：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 建立神经网络模型</span>
<span class="kd">function</span> <span class="nx">createModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 使用sequential对象建立模型</span>
    <span class="kd">const</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">sequential</span><span class="p">();</span> 
    <span class="c1">// 输入层</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">inputShape</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="na">units</span><span class="p">:</span> <span class="mi">128</span><span class="p">,</span> <span class="na">useBias</span><span class="p">:</span> <span class="kc">true</span><span class="p">}));</span>
    <span class="c1">// 隐藏层</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="na">activation</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sigmoid</span><span class="dl">'</span><span class="p">}));</span>    
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="na">activation</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sigmoid</span><span class="dl">'</span><span class="p">}));</span>    
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">activation</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sigmoid</span><span class="dl">'</span><span class="p">}));</span>    
    <span class="c1">// 输出层</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">useBias</span><span class="p">:</span> <span class="kc">true</span><span class="p">}));</span>

    <span class="k">return</span> <span class="nx">model</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>代码中除了没有了tf.keras的关键字其它没有什么特殊的东西。你可能也注意到了，定义模型操作本身速度是很快的，并不需要异步执行。<br />
模型定义完成后，可视化工具提供了modelSummary方法，用于将模型显示在浏览器中供用户检查。</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 在图表窗口显示模型摘要信息</span>
<span class="nx">tfvis</span><span class="p">.</span><span class="nx">show</span><span class="p">.</span><span class="nx">modelSummary</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Model Summary</span><span class="dl">'</span><span class="p">},</span> <span class="nx">model</span><span class="p">);</span>
</code></pre></div></div>
<p><img src="http://blog.17study.com.cn/attachments/201904/tensorFlow2/js-vis-1.png" alt="" /></p>
<h4 id="数据预处理">数据预处理</h4>
<p>在数据载入的时候我们已经进行了一些预处理的工作。这个数据预处理主要是指把js数据转换为TensorFlow处理起来更高效的张量类型。此外还需要做数据的规范化。<br />
在这里有很重要的一点需要说明。js语言在大规模数据的处理上，不如Python的高效。当然这一定程度上是浏览器的限制。<br />
其中最突出的问题是内存的垃圾回收，这个问题困扰js已久，相信不做机器学习你也碰到过。而同时，用户对于浏览器的内存占用本身也是非常敏感的。<br />
TensorFlow.js为了解决这个问题，专门提供了tf.tidy()函数。使用方法是把大规模的内存操作，放置在这个函数的回调中执行。函数调用完成后，tf.tidy()得到控制权，进行内存的清理工作，防止内存泄露。<br />
其它没有什么需要特殊说明的，可以看源码中的注释：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 将数据转换为张量</span>
<span class="kd">function</span> <span class="nx">convertToTensor</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 数据预处理的过程必然会产生很多中间结果，将占用大量内存</span>
  <span class="c1">// tf.tidy()负责清理这些中间结果，所以要把数据处理包含在这个函数之内</span>
  <span class="c1">// 这一点很重要</span>
  <span class="k">return</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tidy</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 把样本数据乱序排列</span>
    <span class="nx">tf</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">shuffle</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

    <span class="c1">// 将数据转换为张量，功率值作为特征值，油耗值作为标定目标</span>
    <span class="kd">const</span> <span class="nx">inputs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">horsepower</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">labels</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">mpg</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">inputTensor</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tensor2d</span><span class="p">(</span><span class="nx">inputs</span><span class="p">,</span> <span class="p">[</span><span class="nx">inputs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="kd">const</span> <span class="nx">labelTensor</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tensor2d</span><span class="p">(</span><span class="nx">labels</span><span class="p">,</span> <span class="p">[</span><span class="nx">labels</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>

    <span class="c1">// 数据规范化，把数据从最小到最大转换为0-1浮点空间</span>
    <span class="kd">const</span> <span class="nx">inputMax</span> <span class="o">=</span> <span class="nx">inputTensor</span><span class="p">.</span><span class="nx">max</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">inputMin</span> <span class="o">=</span> <span class="nx">inputTensor</span><span class="p">.</span><span class="nx">min</span><span class="p">();</span>  
    <span class="kd">const</span> <span class="nx">labelMax</span> <span class="o">=</span> <span class="nx">labelTensor</span><span class="p">.</span><span class="nx">max</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">labelMin</span> <span class="o">=</span> <span class="nx">labelTensor</span><span class="p">.</span><span class="nx">min</span><span class="p">();</span>

    <span class="kd">const</span> <span class="nx">normalizedInputs</span> <span class="o">=</span> <span class="nx">inputTensor</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">inputMin</span><span class="p">).</span><span class="nx">div</span><span class="p">(</span><span class="nx">inputMax</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">inputMin</span><span class="p">));</span>
    <span class="kd">const</span> <span class="nx">normalizedLabels</span> <span class="o">=</span> <span class="nx">labelTensor</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">labelMin</span><span class="p">).</span><span class="nx">div</span><span class="p">(</span><span class="nx">labelMax</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">labelMin</span><span class="p">));</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">inputs</span><span class="p">:</span> <span class="nx">normalizedInputs</span><span class="p">,</span>
      <span class="na">labels</span><span class="p">:</span> <span class="nx">normalizedLabels</span><span class="p">,</span>
      <span class="c1">// 把数据范围值也要返回，我们后面绘图会用到</span>
      <span class="nx">inputMax</span><span class="p">,</span>
      <span class="nx">inputMin</span><span class="p">,</span>
      <span class="nx">labelMax</span><span class="p">,</span>
      <span class="nx">labelMin</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">});</span>  
<span class="p">}</span>
</code></pre></div></div>

<h4 id="完整代码">完整代码</h4>
<p>程序核心的训练和测试（预测）的代码在TensorFlow中非常简单，我们早就有经验了。唯一需要说明的是，除了跟Python中一样使用model.fit()做训练，以及model.predict()做预测，我们的过程和结果，也会使用TensorFLow-vis图表工具可视化出来，显示在浏览器中。<br />
其中训练部分，是使用回调函数，这种机制我们在Python中也见过。目的是能够动态的显示训练的过程，而不是全部训练枯燥、漫长的等待完成才显示一次。<br />
<img src="http://blog.17study.com.cn/attachments/201904/tensorFlow2/js-vis-2.png" alt="" /><br />
预测部分的数据少，速度很快，就是执行完成后一次显示。<br />
但预测部分的数据有大量的转换过程，这个过程消耗内存大，所以放在tf.tidy()中执行以防止内存泄露。<br />
好了，代码秀出，请参考注释阅读：</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 获取数据，只保留感兴趣的字段，并进行数据清洗</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">getData</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">carsDataReq</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://storage.googleapis.com/tfjs-tutorials/carsData.json</span><span class="dl">'</span><span class="p">);</span>  
  <span class="kd">const</span> <span class="nx">carsData</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">carsDataReq</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>  
  <span class="kd">const</span> <span class="nx">cleaned</span> <span class="o">=</span> <span class="nx">carsData</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">car</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">mpg</span><span class="p">:</span> <span class="nx">car</span><span class="p">.</span><span class="nx">Miles_per_Gallon</span><span class="p">,</span>
    <span class="na">horsepower</span><span class="p">:</span> <span class="nx">car</span><span class="p">.</span><span class="nx">Horsepower</span><span class="p">,</span>
  <span class="p">}))</span>
  <span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">car</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">car</span><span class="p">.</span><span class="nx">mpg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nx">car</span><span class="p">.</span><span class="nx">horsepower</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">));</span>
  
  <span class="k">return</span> <span class="nx">cleaned</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// 相当于主程序，执行入口</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//载入数据</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getData</span><span class="p">();</span>
  <span class="c1">//建立绘图数据</span>
  <span class="kd">const</span> <span class="nx">values</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="na">x</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">horsepower</span><span class="p">,</span>
    <span class="na">y</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">mpg</span><span class="p">,</span>
  <span class="p">}));</span>
  <span class="c1">//使用tfvis绘图</span>
  <span class="nx">tfvis</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">scatterplot</span><span class="p">(</span>
    <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Horsepower v MPG</span><span class="dl">'</span><span class="p">},</span>
    <span class="p">{</span><span class="nx">values</span><span class="p">},</span> 
    <span class="p">{</span>
      <span class="na">xLabel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Horsepower</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">yLabel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MPG</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">height</span><span class="p">:</span> <span class="mi">300</span>
    <span class="p">}</span>
  <span class="p">);</span>
  <span class="c1">// 建立神经网络模型</span>
  <span class="kd">const</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">createModel</span><span class="p">();</span>  
  <span class="c1">// 在图表窗口显示模型摘要信息</span>
  <span class="nx">tfvis</span><span class="p">.</span><span class="nx">show</span><span class="p">.</span><span class="nx">modelSummary</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Model Summary</span><span class="dl">'</span><span class="p">},</span> <span class="nx">model</span><span class="p">);</span>

  <span class="c1">// 将数据从js对象转换为张量，并完成预处理</span>
  <span class="kd">const</span> <span class="nx">tensorData</span> <span class="o">=</span> <span class="nx">convertToTensor</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

  <span class="c1">// 使用样本数据训练模型，训练时只需要x/y的值</span>
  <span class="kd">const</span> <span class="p">{</span><span class="nx">inputs</span><span class="p">,</span> <span class="nx">labels</span><span class="p">}</span> <span class="o">=</span> <span class="nx">tensorData</span><span class="p">;</span>
  <span class="k">await</span> <span class="nx">trainModel</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">inputs</span><span class="p">,</span> <span class="nx">labels</span><span class="p">);</span>
  <span class="c1">// 训练完成在console输出完成信息（需要打开浏览器console窗口才能看到）</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Done Training</span><span class="dl">'</span><span class="p">);</span>
  
  <span class="c1">// 使用训练完成的模型进行预测并显示结果</span>
  <span class="nx">testModel</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">tensorData</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 载入完成执行主函数run()</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">DOMContentLoaded</span><span class="dl">'</span><span class="p">,</span> <span class="nx">run</span><span class="p">);</span>

<span class="c1">// 建立神经网络模型</span>
<span class="kd">function</span> <span class="nx">createModel</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 使用sequential对象建立模型</span>
    <span class="kd">const</span> <span class="nx">model</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">sequential</span><span class="p">();</span> 
    <span class="c1">// 输入层</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">inputShape</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="na">units</span><span class="p">:</span> <span class="mi">128</span><span class="p">,</span> <span class="na">useBias</span><span class="p">:</span> <span class="kc">true</span><span class="p">}));</span>
    <span class="c1">// 隐藏层</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="na">activation</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sigmoid</span><span class="dl">'</span><span class="p">}));</span>    
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="na">activation</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sigmoid</span><span class="dl">'</span><span class="p">}));</span>    
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">activation</span><span class="p">:</span> <span class="dl">'</span><span class="s1">sigmoid</span><span class="dl">'</span><span class="p">}));</span>    
    <span class="c1">// 输出层</span>
    <span class="nx">model</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">tf</span><span class="p">.</span><span class="nx">layers</span><span class="p">.</span><span class="nx">dense</span><span class="p">({</span><span class="na">units</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">useBias</span><span class="p">:</span> <span class="kc">true</span><span class="p">}));</span>

    <span class="k">return</span> <span class="nx">model</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 将数据转换为张量</span>
<span class="kd">function</span> <span class="nx">convertToTensor</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 数据预处理的过程必然会产生很多中间结果，将占用大量内存</span>
  <span class="c1">// tf.tidy()负责清理这些中间结果，所以要把数据处理包含在这个函数之内</span>
  <span class="c1">// 这一点很重要</span>
  <span class="k">return</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tidy</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 把样本数据乱序排列</span>
    <span class="nx">tf</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">shuffle</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

    <span class="c1">// 将数据转换为张量，功率值作为特征值，油耗值作为标定目标</span>
    <span class="kd">const</span> <span class="nx">inputs</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">horsepower</span><span class="p">)</span>
    <span class="kd">const</span> <span class="nx">labels</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">mpg</span><span class="p">);</span>

    <span class="kd">const</span> <span class="nx">inputTensor</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tensor2d</span><span class="p">(</span><span class="nx">inputs</span><span class="p">,</span> <span class="p">[</span><span class="nx">inputs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="kd">const</span> <span class="nx">labelTensor</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tensor2d</span><span class="p">(</span><span class="nx">labels</span><span class="p">,</span> <span class="p">[</span><span class="nx">labels</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>

    <span class="c1">// 数据规范化，把数据从最小到最大转换为0-1浮点空间</span>
    <span class="kd">const</span> <span class="nx">inputMax</span> <span class="o">=</span> <span class="nx">inputTensor</span><span class="p">.</span><span class="nx">max</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">inputMin</span> <span class="o">=</span> <span class="nx">inputTensor</span><span class="p">.</span><span class="nx">min</span><span class="p">();</span>  
    <span class="kd">const</span> <span class="nx">labelMax</span> <span class="o">=</span> <span class="nx">labelTensor</span><span class="p">.</span><span class="nx">max</span><span class="p">();</span>
    <span class="kd">const</span> <span class="nx">labelMin</span> <span class="o">=</span> <span class="nx">labelTensor</span><span class="p">.</span><span class="nx">min</span><span class="p">();</span>

    <span class="kd">const</span> <span class="nx">normalizedInputs</span> <span class="o">=</span> <span class="nx">inputTensor</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">inputMin</span><span class="p">).</span><span class="nx">div</span><span class="p">(</span><span class="nx">inputMax</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">inputMin</span><span class="p">));</span>
    <span class="kd">const</span> <span class="nx">normalizedLabels</span> <span class="o">=</span> <span class="nx">labelTensor</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">labelMin</span><span class="p">).</span><span class="nx">div</span><span class="p">(</span><span class="nx">labelMax</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">labelMin</span><span class="p">));</span>

    <span class="k">return</span> <span class="p">{</span>
      <span class="na">inputs</span><span class="p">:</span> <span class="nx">normalizedInputs</span><span class="p">,</span>
      <span class="na">labels</span><span class="p">:</span> <span class="nx">normalizedLabels</span><span class="p">,</span>
      <span class="c1">// 把数据范围值也要返回，我们后面绘图会用到</span>
      <span class="nx">inputMax</span><span class="p">,</span>
      <span class="nx">inputMin</span><span class="p">,</span>
      <span class="nx">labelMax</span><span class="p">,</span>
      <span class="nx">labelMin</span><span class="p">,</span>
    <span class="p">}</span>
  <span class="p">});</span>  
<span class="p">}</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nx">trainModel</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">inputs</span><span class="p">,</span> <span class="nx">labels</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 编译模型 </span>
  <span class="nx">model</span><span class="p">.</span><span class="nx">compile</span><span class="p">({</span>
      <span class="na">optimizer</span><span class="p">:</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">train</span><span class="p">.</span><span class="nx">adam</span><span class="p">(),</span>
      <span class="na">loss</span><span class="p">:</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">losses</span><span class="p">.</span><span class="nx">meanSquaredError</span><span class="p">,</span>
      <span class="na">metrics</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">mse</span><span class="dl">'</span><span class="p">],</span>
  <span class="p">});</span>
  <span class="c1">//每批次数据数量和训练迭代数量</span>
  <span class="kd">const</span> <span class="nx">batchSize</span> <span class="o">=</span> <span class="mi">28</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">epochs</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>

  <span class="c1">// 训练</span>
  <span class="k">return</span> <span class="k">await</span> <span class="nx">model</span><span class="p">.</span><span class="nx">fit</span><span class="p">(</span><span class="nx">inputs</span><span class="p">,</span> <span class="nx">labels</span><span class="p">,</span> <span class="p">{</span>
      <span class="nx">batchSize</span><span class="p">,</span>
      <span class="nx">epochs</span><span class="p">,</span>
      <span class="na">shuffle</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="c1">// 使用回调函数绘制训练过程，曲线指标loss/mse</span>
      <span class="na">callbacks</span><span class="p">:</span> <span class="nx">tfvis</span><span class="p">.</span><span class="nx">show</span><span class="p">.</span><span class="nx">fitCallbacks</span><span class="p">(</span>
        <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Training Performance</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">[</span><span class="dl">'</span><span class="s1">loss</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">mse</span><span class="dl">'</span><span class="p">],</span> 
        <span class="p">{</span> <span class="na">height</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="na">callbacks</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">onEpochEnd</span><span class="dl">'</span><span class="p">]</span> <span class="p">}</span>
      <span class="p">)</span>
  <span class="p">});</span>
<span class="p">}</span>

<span class="c1">// 测试模型</span>
<span class="kd">function</span> <span class="nx">testModel</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">inputData</span><span class="p">,</span> <span class="nx">normalizationData</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// 获取数据集的取值范围</span>
  <span class="kd">const</span> <span class="p">{</span><span class="nx">inputMax</span><span class="p">,</span> <span class="nx">inputMin</span><span class="p">,</span> <span class="nx">labelMin</span><span class="p">,</span> <span class="nx">labelMax</span><span class="p">}</span> <span class="o">=</span> <span class="nx">normalizationData</span><span class="p">;</span>  

  <span class="c1">// 防止内存泄露，依然要把大量数据的操作放在tf.tidy值中</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">xs</span><span class="p">,</span> <span class="nx">preds</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">tidy</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">//功率数据直接使用0-1空间，相当于遍历所有样本空间</span>
      <span class="kd">const</span> <span class="nx">xs</span> <span class="o">=</span> <span class="nx">tf</span><span class="p">.</span><span class="nx">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
      <span class="c1">//批量预测</span>
      <span class="kd">const</span> <span class="nx">preds</span> <span class="o">=</span> <span class="nx">model</span><span class="p">.</span><span class="nx">predict</span><span class="p">(</span><span class="nx">xs</span><span class="p">.</span><span class="nx">reshape</span><span class="p">([</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">]));</span>      
      
      <span class="c1">// 预测结果也是规范化的0-1值，所以使用数据集取值范围还原到原始样本模型</span>
      <span class="kd">const</span> <span class="nx">unNormXs</span> <span class="o">=</span> <span class="nx">xs</span>
        <span class="p">.</span><span class="nx">mul</span><span class="p">(</span><span class="nx">inputMax</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">inputMin</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">inputMin</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">unNormPreds</span> <span class="o">=</span> <span class="nx">preds</span>
        <span class="p">.</span><span class="nx">mul</span><span class="p">(</span><span class="nx">labelMax</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">labelMin</span><span class="p">))</span>
        <span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">labelMin</span><span class="p">);</span>
      
      <span class="c1">// 返回最终结果</span>
      <span class="k">return</span> <span class="p">[</span><span class="nx">unNormXs</span><span class="p">.</span><span class="nx">dataSync</span><span class="p">(),</span> <span class="nx">unNormPreds</span><span class="p">.</span><span class="nx">dataSync</span><span class="p">()];</span>
  <span class="p">});</span>
  <span class="c1">// 准备成绘图数据</span>
  <span class="kd">const</span> <span class="nx">predictedPoints</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">xs</span><span class="p">).</span><span class="nx">map</span><span class="p">((</span><span class="nx">val</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="nx">val</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="nx">preds</span><span class="p">[</span><span class="nx">i</span><span class="p">]}</span>
  <span class="p">});</span>
  <span class="c1">// 原始的样本生成散列点同屏显示</span>
  <span class="kd">const</span> <span class="nx">originalPoints</span> <span class="o">=</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="na">x</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">horsepower</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">mpg</span><span class="p">,</span>
  <span class="p">}));</span>

  <span class="c1">//绘图</span>
  <span class="nx">tfvis</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">scatterplot</span><span class="p">(</span>
      <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Model Predictions vs Original Data</span><span class="dl">'</span><span class="p">},</span> 
      <span class="p">{</span><span class="na">values</span><span class="p">:</span> <span class="p">[</span><span class="nx">originalPoints</span><span class="p">,</span> <span class="nx">predictedPoints</span><span class="p">],</span> <span class="na">series</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">original</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">predicted</span><span class="dl">'</span><span class="p">]},</span> 
      <span class="p">{</span>
      <span class="na">xLabel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Horsepower</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">yLabel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">MPG</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">height</span><span class="p">:</span> <span class="mi">300</span>
      <span class="p">}</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>程序执行，最终预测测试的输出结果如下：<br />
<img src="http://blog.17study.com.cn/attachments/201904/tensorFlow2/js-vis-3.png" alt="" /></p>

<h4 id="结语">结语</h4>
<p>本连载目标定位让已经有TensorFlow使用经验的技术人员，快速上手TensorFlow 2.0开发。<br />
不知不觉，连载15篇。但还有很多内容未能包含进来。比如分布式训练、比如图像内容描述等。建议有需要的朋友继续到官网文档中学习。<br />
水平所限，文中错误、疏漏不少，欢迎批评指正。</p>

<p>（连载完）</p>

:ET