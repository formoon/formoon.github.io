I"��<p><img shttps://raw.githubusercontent.com/formoon/formoon.github.io/master/attachmentsiles/201910/titlepic/opencl.png" alt="" />
随着深度学习、区块链的发展，人类对计算量的需求越来越高，在传统的计算模式下，压榨GPU的计算能力一直是重点。<br />
NV系列的显卡在这方面走的比较快，CUDA框架已经普及到了高性能计算的各个方面，比如Google的TensorFlow深度学习框架，默认内置了支持CUDA的GPU计算。<br />
AMD(ATI)及其它显卡在这方面似乎一直不够给力，在CUDA退出后仓促应对，使用了开放式的OPENCL架构，其中对CUDA应当说有不少的模仿。开放架构本来是一件好事，但OPENCL的发展一直不尽人意。而且为了兼容更多的显卡，程序中通用层导致的效率损失一直比较大。而实际上，现在的高性能显卡其实也就剩下了NV/AMD两家的竞争，这样基本没什么意义的性能损失不能不说让人纠结。所以在个人工作站和个人装机市场，通常的选择都是NV系列的显卡。<br />
mac电脑在这方面是比较尴尬的，当前的高端系列是MacPro垃圾桶。至少新款的一体机MacPro量产之前，垃圾桶仍然是mac家性能的扛鼎产品。然而其内置的显卡就是AMD，只能使用OPENCL通用计算框架了。</p>

<p>下面是苹果官方给出的一个OPENCL的入门例子，结构很清晰，展示了使用显卡进行高性能计算的一般结构，我在注释中增加了中文的说明，相信可以让你更容易的上手OPENCL显卡计算。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">// File:       hello.c</span>
<span class="c1">//</span>
<span class="c1">// Abstract:   A simple "Hello World" compute example showing basic usage of OpenCL which</span>
<span class="c1">//             calculates the mathematical square (X[i] = pow(X[i],2)) for a buffer of</span>
<span class="c1">//             floating point values.</span>
<span class="c1">//             </span>
<span class="c1">//</span>
<span class="c1">// Version:    &lt;1.0&gt;</span>
<span class="c1">//</span>
<span class="c1">// Disclaimer: IMPORTANT:  This Apple software is supplied to you by Apple Inc. ("Apple")</span>
<span class="c1">//             in consideration of your agreement to the following terms, and your use,</span>
<span class="c1">//             installation, modification or redistribution of this Apple software</span>
<span class="c1">//             constitutes acceptance of these terms.  If you do not agree with these</span>
<span class="c1">//             terms, please do not use, install, modify or redistribute this Apple</span>
<span class="c1">//             software.</span>
<span class="c1">//</span>
<span class="c1">//             In consideration of your agreement to abide by the following terms, and</span>
<span class="c1">//             subject to these terms, Apple grants you a personal, non - exclusive</span>
<span class="c1">//             license, under Apple's copyrights in this original Apple software ( the</span>
<span class="c1">//             "Apple Software" ), to use, reproduce, modify and redistribute the Apple</span>
<span class="c1">//             Software, with or without modifications, in source and / or binary forms;</span>
<span class="c1">//             provided that if you redistribute the Apple Software in its entirety and</span>
<span class="c1">//             without modifications, you must retain this notice and the following text</span>
<span class="c1">//             and disclaimers in all such redistributions of the Apple Software. Neither</span>
<span class="c1">//             the name, trademarks, service marks or logos of Apple Inc. may be used to</span>
<span class="c1">//             endorse or promote products derived from the Apple Software without specific</span>
<span class="c1">//             prior written permission from Apple.  Except as expressly stated in this</span>
<span class="c1">//             notice, no other rights or licenses, express or implied, are granted by</span>
<span class="c1">//             Apple herein, including but not limited to any patent rights that may be</span>
<span class="c1">//             infringed by your derivative works or by other works in which the Apple</span>
<span class="c1">//             Software may be incorporated.</span>
<span class="c1">//</span>
<span class="c1">//             The Apple Software is provided by Apple on an "AS IS" basis.  APPLE MAKES NO</span>
<span class="c1">//             WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED</span>
<span class="c1">//             WARRANTIES OF NON - INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A</span>
<span class="c1">//             PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND OPERATION</span>
<span class="c1">//             ALONE OR IN COMBINATION WITH YOUR PRODUCTS.</span>
<span class="c1">//</span>
<span class="c1">//             IN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL OR</span>
<span class="c1">//             CONSEQUENTIAL DAMAGES ( INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF</span>
<span class="c1">//             SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS</span>
<span class="c1">//             INTERRUPTION ) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION, MODIFICATION</span>
<span class="c1">//             AND / OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED AND WHETHER</span>
<span class="c1">//             UNDER THEORY OF CONTRACT, TORT ( INCLUDING NEGLIGENCE ), STRICT LIABILITY OR</span>
<span class="c1">//             OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span>
<span class="c1">//</span>
<span class="c1">// Copyright ( C ) 2008 Apple Inc. All Rights Reserved.</span>
<span class="c1">//</span>
 
<span class="c1">////////////////////////////////////////////////////////////////////////////////</span>
 
<span class="cp">#include &lt;fcntl.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;OpenCL/opencl.h&gt;
</span> 
<span class="c1">////////////////////////////////////////////////////////////////////////////////</span>
 
<span class="c1">// Use a static data size for simplicity</span>
<span class="c1">//</span>
<span class="cp">#define DATA_SIZE (1024)
</span> 
<span class="c1">////////////////////////////////////////////////////////////////////////////////</span>
 
<span class="c1">// Simple compute kernel which computes the square of an input array </span>
<span class="c1">// 这是OPENCL用于计算的内核部分源码，跟C相同的语法格式，通过编译后将发布到GPU设备</span>
<span class="c1">//（或者将来专用的计算设备）上面去执行。因为显卡通常有几十、上百个内核，所以这部分</span>
<span class="c1">// 需要设计成可并发的程序逻辑。</span>
<span class="c1">// </span>
<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">KernelSource</span> <span class="o">=</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"__kernel void square(                                                       </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"   __global float* input,                                              </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"   __global float* output,                                             </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"   const unsigned int count)                                           </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"{                                                                      </span><span class="se">\n</span><span class="s">"</span> \
<span class="c1">// 并发逻辑主要是在下面这一行体现的，i的初始值获取当前内核的id（整数）,根据id计算自己的那一小块任务</span>
<span class="s">"   int i = get_global_id(0);                                           </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"   if(i &lt; count)                                                       </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"       output[i] = input[i] * input[i];                                </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"}                                                                      </span><span class="se">\n</span><span class="s">"</span> \
<span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
 
<span class="c1">////////////////////////////////////////////////////////////////////////////////</span>
 
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">err</span><span class="p">;</span>                            <span class="c1">// error code returned from api calls</span>
      
    <span class="kt">float</span> <span class="n">data</span><span class="p">[</span><span class="n">DATA_SIZE</span><span class="p">];</span>              <span class="c1">// original data set given to device</span>
    <span class="kt">float</span> <span class="n">results</span><span class="p">[</span><span class="n">DATA_SIZE</span><span class="p">];</span>           <span class="c1">// results returned from device</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">correct</span><span class="p">;</span>               <span class="c1">// number of correct results returned</span>
 
    <span class="kt">size_t</span> <span class="n">global</span><span class="p">;</span>                      <span class="c1">// global domain size for our calculation</span>
    <span class="kt">size_t</span> <span class="n">local</span><span class="p">;</span>                       <span class="c1">// local domain size for our calculation</span>
 
    <span class="n">cl_device_id</span> <span class="n">device_id</span><span class="p">;</span>             <span class="c1">// compute device id </span>
    <span class="n">cl_context</span> <span class="n">context</span><span class="p">;</span>                 <span class="c1">// compute context</span>
    <span class="n">cl_command_queue</span> <span class="n">commands</span><span class="p">;</span>          <span class="c1">// compute command queue</span>
    <span class="n">cl_program</span> <span class="n">program</span><span class="p">;</span>                 <span class="c1">// compute program</span>
    <span class="n">cl_kernel</span> <span class="n">kernel</span><span class="p">;</span>                   <span class="c1">// compute kernel</span>
    
    <span class="n">cl_mem</span> <span class="n">input</span><span class="p">;</span>                       <span class="c1">// device memory used for the input array</span>
    <span class="n">cl_mem</span> <span class="n">output</span><span class="p">;</span>                      <span class="c1">// device memory used for the output array</span>
    
    <span class="c1">// Fill our data set with random float values</span>
    <span class="c1">//</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">DATA_SIZE</span><span class="p">;</span>
	<span class="c1">//随机产生一组浮点数据，用于给GPU进行计算</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">/</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">RAND_MAX</span><span class="p">;</span>
    
    <span class="c1">// Connect to a compute device</span>
    <span class="c1">//</span>
    <span class="kt">int</span> <span class="n">gpu</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="c1">// 获取GPU设备，OPENCL的优势是可以使用CPU进行模拟，当然这种功能只是为了在没有GPU设备上进行调试</span>
	<span class="c1">// 如果上面变量gpu=0的话，则使用CPU模拟</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">clGetDeviceIDs</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">gpu</span> <span class="o">?</span> <span class="n">CL_DEVICE_TYPE_GPU</span> <span class="o">:</span> <span class="n">CL_DEVICE_TYPE_CPU</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">device_id</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="n">CL_SUCCESS</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to create a device group!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>
  
    <span class="c1">// Create a compute context </span>
    <span class="c1">// 建立一个GPU计算的上下文环境，一组上下文环境保存一组相关的状态、内存等资源</span>
    <span class="n">context</span> <span class="o">=</span> <span class="n">clCreateContext</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">device_id</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">err</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">context</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to create a compute context!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>
 
    <span class="c1">// Create a command commands</span>
    <span class="c1">//使用获取到的GPU设备和上下文环境监理一个命令队列，其实就是给GPU的任务队列</span>
    <span class="n">commands</span> <span class="o">=</span> <span class="n">clCreateCommandQueue</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">device_id</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">err</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">commands</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to create a command commands!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>
 
    <span class="c1">// Create the compute program from the source buffer</span>
    <span class="c1">//将内核程序的字符串加载到上下文环境</span>
    <span class="n">program</span> <span class="o">=</span> <span class="n">clCreateProgramWithSource</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">KernelSource</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">err</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">program</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to create compute program!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>
 
    <span class="c1">// Build the program executable</span>
    <span class="c1">//根据所使用的设备，将程序编译成目标机器语言代码，跟通常的编译类似，</span>
	<span class="c1">//内核程序的语法类错误信息都会在这里出现，所以一般尽可能打印完整从而帮助判断。</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">clBuildProgram</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="n">CL_SUCCESS</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">size_t</span> <span class="n">len</span><span class="p">;</span>
        <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>
 
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to build program executable!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">clGetProgramBuildInfo</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="n">device_id</span><span class="p">,</span> <span class="n">CL_PROGRAM_BUILD_LOG</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">),</span> <span class="n">buffer</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
 
    <span class="c1">// Create the compute kernel in the program we wish to run</span>
    <span class="c1">//使用内核程序的函数名建立一个计算内核</span>
    <span class="n">kernel</span> <span class="o">=</span> <span class="n">clCreateKernel</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="s">"square"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">err</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">kernel</span> <span class="o">||</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">CL_SUCCESS</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to create compute kernel!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
 
    <span class="c1">// Create the input and output arrays in device memory for our calculation</span>
    <span class="c1">// 建立GPU的输入缓冲区，注意READ_ONLY是对GPU而言的，这个缓冲区是建立在显卡显存中的</span>
    <span class="n">input</span> <span class="o">=</span> <span class="n">clCreateBuffer</span><span class="p">(</span><span class="n">context</span><span class="p">,</span>  <span class="n">CL_MEM_READ_ONLY</span><span class="p">,</span>  <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
	<span class="c1">// 建立GPU的输出缓冲区，用于输出计算结果</span>
    <span class="n">output</span> <span class="o">=</span> <span class="n">clCreateBuffer</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">CL_MEM_WRITE_ONLY</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">input</span> <span class="o">||</span> <span class="o">!</span><span class="n">output</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to allocate device memory!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>    
    
    <span class="c1">// Write our data set into the input array in device memory </span>
    <span class="c1">// 将CPU内存中的数据，写入到GPU显卡内存（内核函数的input部分）</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">clEnqueueWriteBuffer</span><span class="p">(</span><span class="n">commands</span><span class="p">,</span> <span class="n">input</span><span class="p">,</span> <span class="n">CL_TRUE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="n">CL_SUCCESS</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to write to source array!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
 
    <span class="c1">// Set the arguments to our compute kernel</span>
    <span class="c1">// 设定内核函数中的三个参数</span>
    <span class="n">err</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">err</span>  <span class="o">=</span> <span class="n">clSetKernelArg</span><span class="p">(</span><span class="n">kernel</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cl_mem</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
    <span class="n">err</span> <span class="o">|=</span> <span class="n">clSetKernelArg</span><span class="p">(</span><span class="n">kernel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cl_mem</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">output</span><span class="p">);</span>
    <span class="n">err</span> <span class="o">|=</span> <span class="n">clSetKernelArg</span><span class="p">(</span><span class="n">kernel</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">count</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="n">CL_SUCCESS</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to set kernel arguments! %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
 
    <span class="c1">// Get the maximum work group size for executing the kernel on the device</span>
    <span class="c1">//获取GPU可用的计算核心数量</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">clGetKernelWorkGroupInfo</span><span class="p">(</span><span class="n">kernel</span><span class="p">,</span> <span class="n">device_id</span><span class="p">,</span> <span class="n">CL_KERNEL_WORK_GROUP_SIZE</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">local</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">local</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="n">CL_SUCCESS</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to retrieve kernel work group info! %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
 
    <span class="c1">// Execute the kernel over the entire range of our 1d input data set</span>
    <span class="c1">// using the maximum number of work group items for this device</span>
    <span class="c1">// 这是真正的计算部分，计算启动的时候采用队列的方式，因为一般计算任务的数量都会远远大于可用的内核数量，</span>
	<span class="c1">// 在下面函数中，local是可用的内核数，global是要计算的数量，OPENCL会自动执行队列，完成所有的计算</span>
	<span class="c1">// 所以在前面强调了，内核程序的设计要考虑、并尽力利用这种并发特征</span>
    <span class="n">global</span> <span class="o">=</span> <span class="n">count</span><span class="p">;</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">clEnqueueNDRangeKernel</span><span class="p">(</span><span class="n">commands</span><span class="p">,</span> <span class="n">kernel</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">global</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">local</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to execute kernel!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>
 
    <span class="c1">// Wait for the command commands to get serviced before reading back results</span>
    <span class="c1">// 阻塞直到OPENCL完成所有的计算任务</span>
    <span class="n">clFinish</span><span class="p">(</span><span class="n">commands</span><span class="p">);</span>
 
    <span class="c1">// Read back the results from the device to verify the output</span>
    <span class="c1">// 从GPU显存中把计算的结果复制到CPU内存</span>
    <span class="n">err</span> <span class="o">=</span> <span class="n">clEnqueueReadBuffer</span><span class="p">(</span> <span class="n">commands</span><span class="p">,</span> <span class="n">output</span><span class="p">,</span> <span class="n">CL_TRUE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">,</span> <span class="n">results</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">);</span>  
    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">!=</span> <span class="n">CL_SUCCESS</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Error: Failed to read output array! %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">err</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="c1">// Validate our results</span>
    <span class="c1">// 下面是使用CPU计算来验证OPENCL计算结果是否正确</span>
    <span class="n">correct</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">results</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">correct</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1">// Print a brief summary detailing the results</span>
    <span class="c1">// 显示验证的结果</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Computed '%d/%d' correct values!</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">correct</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
    
    <span class="c1">// Shutdown and cleanup</span>
    <span class="c1">// 清理各类对象及关闭OPENCL环境</span>
    <span class="n">clReleaseMemObject</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
    <span class="n">clReleaseMemObject</span><span class="p">(</span><span class="n">output</span><span class="p">);</span>
    <span class="n">clReleaseProgram</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
    <span class="n">clReleaseKernel</span><span class="p">(</span><span class="n">kernel</span><span class="p">);</span>
    <span class="n">clReleaseCommandQueue</span><span class="p">(</span><span class="n">commands</span><span class="p">);</span>
    <span class="n">clReleaseContext</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
 
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>因为使用了mac的OPENCL框架，所以编译的时候要加上对框架的引用，如下所示：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc <span class="nt">-o</span> hello hello.c <span class="nt">-framework</span> OpenCL
</code></pre></div></div>

:ET