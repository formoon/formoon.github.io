I"d,<p><img src="/attachments/201912/wood-crate.jpg" alt="" /><br />
不知道你的体会是什么，我从C切换到Rust以来，最大的感受并不是语法方面的—那些方面已经有足够多人抱怨而又享受着了。我最大的感受是终于把Web编程工具，同系统编程工具统一了起来。<br />
C/C++其实也有很多不错的Web编程框架，只是依然总感觉味道不对。所以平常Node.Js / Golang /Python都会穿插在工作中。无论是开发效率，还是维护的方便程度，C/C++在Web开发方面还是弱项。</p>

<p>Rust让这种情况彻底改观。Rust本身在系统开发方面就有不错的表现，社区中又出现了不少优秀的开源框架提供Web编程支持。<br />
这其中老牌的Actix和新秀Rocket是用的比较多的两个。个人其实用Actix多一些，毕竟出来时间长，性能评测得分又比较高，社区还有比较好的支持。比如解决MultiPart FormData上传已经有了好用的工具箱awmp。<br />
但作为万年不变的乙方代表，很多时候对于开发环境的选择还是做不到完全自主。Rocket也是不时的会用一下，Rocket易用性更好，上手容易。对于文件上传，工具本身也提供了一些粗糙的支持，但跟awmp比还是差了很多。</p>

<p>在对网上各种资源仔细搜索寻找之后，决定还是自己来写一个，这就是今天的rocket_upload。</p>

<p>工具背后做了很多事情来解析MultiPart FormData, 但用起来还是非常容易。<br />
要做的事情只有三个，首先，在Cargo.toml文件中加入rocket-upload依赖：</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rocket_upload</span> <span class="o">=</span> <span class="s">"*"</span>
</code></pre></div></div>
<p>第二，是在程序一开始对rocket_upload做引用：</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">use</span> <span class="nn">rocket_upload</span><span class="p">::</span><span class="n">MultipartDatas</span><span class="p">;</span>
</code></pre></div></div>
<p>最后，则是在请求处理函数中使用了，来看代码：</p>
<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">#[post(</span><span class="s">"/upload/&lt;userid&gt;"</span><span class="nd">,</span> <span class="nd">data</span> <span class="nd">=</span> <span class="s">"&lt;data&gt;"</span><span class="nd">)]</span>
<span class="k">fn</span> <span class="nf">upload</span><span class="p">(</span><span class="n">userid</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="n">content_type</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ContentType</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">MultipartDatas</span><span class="p">)</span> <span class="k">-&gt;</span> <span class="n">Html</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span>
<span class="p">{</span>
  <span class="c1">// 获取在路径中嵌入的用户参数，只是演示同原有系统之间的兼容性，无实际意义</span>
  <span class="k">let</span> <span class="k">mut</span> <span class="n">result</span><span class="o">=</span><span class="nd">format!</span><span class="p">(</span><span class="s">"UserID:{}&lt;br&gt;"</span><span class="p">,</span><span class="n">userid</span><span class="p">);</span>
  <span class="c1">// content_type在这里并没有使用，所以实际可以在函数声明中取消这个变量，但如果想了解MultiPart的更多信息，还是可以用</span>
  <span class="n">result</span> <span class="o">=</span> <span class="nd">format!</span><span class="p">(</span><span class="s">"{}{:?}&lt;br&gt;"</span><span class="p">,</span><span class="n">result</span><span class="p">,</span><span class="n">content_type</span><span class="p">);</span>
  <span class="c1">// 获取用户网页表单中其它的字段值</span>
  <span class="k">for</span> <span class="n">t</span> <span class="k">in</span> <span class="n">data</span><span class="py">.texts</span> <span class="p">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="nd">format!</span><span class="p">(</span><span class="s">"{}FieldName:{} --- FieldValue:{}&lt;br&gt;"</span><span class="p">,</span><span class="n">result</span><span class="p">,</span><span class="n">t</span><span class="py">.key</span><span class="p">,</span><span class="n">t</span><span class="py">.value</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="c1">// 获取用户表单中上传的文件，支持多个文件的上传</span>
  <span class="k">for</span> <span class="n">f</span> <span class="k">in</span> <span class="n">data</span><span class="py">.files</span> <span class="p">{</span>
    <span class="n">result</span> <span class="o">=</span> <span class="nd">format!</span><span class="p">(</span><span class="s">"{}FieldName:{} --- FileName:{} --- StoragePath:{}&lt;br&gt;"</span><span class="p">,</span>
      <span class="n">result</span><span class="p">,</span><span class="n">f</span><span class="py">.name</span><span class="p">,</span><span class="n">f</span><span class="py">.filename</span><span class="p">,</span><span class="n">f</span><span class="py">.path</span><span class="p">);</span>
    <span class="c1">// 文件在rocket-upload处理后，会保存在/tmp目录，下面的命令把文件拷贝到自己定义的上传文件夹</span>
    <span class="n">f</span><span class="nf">.persist</span><span class="p">(</span><span class="nn">Path</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"upload"</span><span class="p">));</span>
  <span class="p">}</span>
  <span class="c1">// 在反馈的网页中显示所有获取到的数据信息</span>
  <span class="nf">Html</span><span class="p">(</span><span class="nd">format!</span><span class="p">(</span><span class="s">"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;upload coming...&lt;br&gt;{}&lt;/body&gt;&lt;/html&gt;"</span><span class="p">,</span><span class="n">result</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>
<p>就我当前找遍全网的经历来看，这算最简单的MultiPart处理工具了吧。<br />
对应的，把网页表单的代码也贴出来对比来看一下：</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge,chrome=1"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"content-type"</span> <span class="na">content=</span><span class="s">"text/html;charset=utf-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">content=</span><span class="s">"always"</span> <span class="na">name=</span><span class="s">"referrer"</span><span class="nt">&gt;</span>
<span class="nt">&lt;title&gt;</span>upload<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;body</span> <span class="na">link=</span><span class="s">"#0000cc"</span> <span class="na">style=</span><span class="s">""</span><span class="nt">&gt;</span>
        <span class="nt">&lt;form</span> <span class="na">id=</span><span class="s">"data"</span> <span class="na">enctype=</span><span class="s">"multipart/form-data"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">action=</span><span class="s">"/upload/334445566"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
              name:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"name"</span><span class="nt">&gt;&lt;br/&gt;</span>
              information:<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"info"</span><span class="nt">&gt;&lt;br/&gt;</span>
              Select files wanna upload , and click at "UPLOAD" button.<span class="nt">&lt;br</span> <span class="nt">/&gt;&lt;br/&gt;</span>
                <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">name=</span><span class="s">"files"</span> <span class="na">multiple</span><span class="nt">&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"UPLOAD"</span><span class="nt">&gt;</span>UPLOAD<span class="nt">&lt;/button&gt;</span>
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
<p>简单来说，在请求处理函数中，原有Restful风格，在URL中嵌入的变量，仍然采用Rocket原有的方式来声明和处理。<br />
随后是MultipartDatas类型的变量，在本例中是<code class="language-plaintext highlighter-rouge">data</code>。<br />
变量结构类型分为两个部分，成员<code class="language-plaintext highlighter-rouge">texts</code>中包含表单中除上传文件之外的字段，字段名称保存在key成员变量中，值保存在value成员变量中。<br />
<code class="language-plaintext highlighter-rouge">files</code>则包含表单中上传的文件，如果只有一个文件上传，那就是files[0]。表单字段名称保存在name成员，单独的文件名，也就是来自于MultiPart数据中的，保存在成员filename，缓存文件的完整路径保存在path成员。<br />
因为缓存的文件在请求处理函数完成后就超出了作用域，从而被自动删除。所以如果想把文件长久保存下来，可以自己建立一个文件夹比如upload，然后使用<code class="language-plaintext highlighter-rouge">f.persist(Path::new("upload"));</code>把文件拷贝过去。<br />
这是使用拷贝而不是移动，是因为在很多系统中，<code class="language-plaintext highlighter-rouge">/tmp</code>文件夹往往是内存卷，跟硬盘并不是同一个存储设备，直接移动的话，在某些系统中可能会报错，也无法真正将文件保存起来。</p>

<p>源码仓库地址：<a href="https://github.com/formoon/rocket-upload">https://github.com/formoon/rocket-upload</a></p>

<p>本工具编写的时候，参考了原有的一个rocket扩展：<a href="https://crates.io/crates/rocket-multipart-form-data">https://crates.io/crates/rocket-multipart-form-data</a></p>

:ET